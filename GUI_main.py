import sys
import cv2
import subprocess
import webbrowser
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QTextEdit, QFrame)
from PyQt5.QtCore import QTimer, Qt, QThread, pyqtSignal
from PyQt5.QtGui import QImage, QPixmap, QFont
import os
import time

class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(QImage)
    
    def __init__(self, rtsp_url="rtsp://admin:Nice1234@192.168.1.108:554/cam/realmonitor?channel=1&subtype=0"):
        super().__init__()
        self.rtsp_url = rtsp_url
        self.running = False
        self.cap = None
        
        # Clear previous files
        self.clear_files()
    
    def clear_files(self):
        """Clear text files and result plate images"""
        # Clear text files
        with open('txt_file/car_plate.txt', 'w') as f:
            f.truncate(0)
        with open('txt_file/names.txt', 'w') as f:
            f.truncate(0)
        
        # Clear result plate images
        if os.path.exists('result_plate'):
            for filename in os.listdir('result_plate'):
                file_path = os.path.join('result_plate', filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
    
    def start_camera(self):
        """Initialize camera connection"""
        '''self.cap = cv2.VideoCapture("video_test/video_CCTV_test1.mp4")'''
        self.cap = cv2.VideoCapture(self.rtsp_url)
        self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        # Set additional properties for better performance
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1080)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 640)
        self.cap.set(cv2.CAP_PROP_FPS, 25)
        
        return self.cap.isOpened()
    
    def run(self):
        self.running = True
        
        # Initialize camera
        if not self.start_camera():
            print("Failed to connect to camera")
            return
        
        print("Camera connected successfully")
        
        while self.running:
            ret, frame = self.cap.read()
            
            if not ret:
                print("Failed to read frame, attempting to reconnect...")
                self.cap.release()
                time.sleep(2)  # Wait before reconnecting
                
                if not self.start_camera():
                    print("Failed to reconnect to camera")
                    break
                continue
            
            # Convert frame to Qt format
            try:
                rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = rgb_image.shape
                bytes_per_line = ch * w
                qt_image = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
                
                # Scale image to desired size
                scaled_image = qt_image.scaled(720, 480, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                
                # Emit signal with the processed image
                self.change_pixmap_signal.emit(scaled_image)
                
            except Exception as e:
                print(f"Error processing frame: {e}")
                continue
            
            # Small delay to prevent overwhelming the system
            time.sleep(0.01)  # ~25 FPS
    
    def stop(self):
        """Stop the video thread"""
        self.running = False
        if self.cap:
            self.cap.release()
        self.wait()  # Wait for thread to finish
    
    def get_current_frame(self):
        """Get current frame for processing (without Qt conversion)"""
        if self.cap and self.cap.isOpened():
            ret, frame = self.cap.read()
            if ret:
                return frame
        return None
    
    def is_camera_connected(self):
        """Check if camera is connected"""
        return self.cap is not None and self.cap.isOpened()
    
class ModernButton(QPushButton):
    def __init__(self, text, color_scheme="primary"):
        super().__init__(text)
        self.color_scheme = color_scheme
        self.setStyleSheet(self.get_style())
        
    def get_style(self):
        if self.color_scheme == "success":
            return """
                QPushButton {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #4CAF50, stop:1 #45a049);
                    color: white;
                    border: none;
                    padding: 12px 25px;
                    font-size: 14px;
                    font-weight: 600;
                    border-radius: 8px;
                    min-width: 140px;
                }
                QPushButton:hover {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #5CBF60, stop:1 #4CAF50);
                }
                QPushButton:pressed {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #3d8b40, stop:1 #2e7d32);
                }
                QPushButton:disabled {
                    background: #cccccc;
                    color: #666666;
                }
            """
        elif self.color_scheme == "danger":
            return """
                QPushButton {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #f44336, stop:1 #d32f2f);
                    color: white;
                    border: none;
                    padding: 12px 25px;
                    font-size: 14px;
                    font-weight: 600;
                    border-radius: 8px;
                    min-width: 140px;
                }
                QPushButton:hover {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #f66356, stop:1 #f44336);
                }
                QPushButton:pressed {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #c62828, stop:1 #b71c1c);
                }
            """
        else:  # warning/yellow
            return """
                QPushButton {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #FF9800, stop:1 #F57C00);
                    color: white;
                    border: none;
                    padding: 10px 15px;
                    font-size: 12px;
                    font-weight: 600;
                    border-radius: 6px;
                    min-width: 280px;
                }
                QPushButton:hover {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #FFB74D, stop:1 #FF9800);
                }
                QPushButton:pressed {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                        stop:0 #E65100, stop:1 #BF360C);
                }
            """

class SystemGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á")
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
        self.setGeometry(100, 100, 1400, 900)
        
        # ‡πÄ‡∏Å‡πá‡∏ö process ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà
        self.running_processes = []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á video thread
        self.video_thread = VideoThread()
        self.video_thread.change_pixmap_signal.connect(self.update_image)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏° (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏•‡∏ö properties ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å)
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, 
                    stop:0 #1a1a2e, stop:0.5 #16213e, stop:1 #0f3460);
            }
            QLabel {
                color: #ffffff;
            }
        """)
        
        self.init_ui()
        
    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout ‡∏´‡∏•‡∏±‡∏Å
        main_layout = QVBoxLayout()
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Header Section (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå)
        header_frame = QFrame()
        header_frame.setFixedHeight(60)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 100 ‡πÄ‡∏õ‡πá‡∏ô 60
        header_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #667eea, stop:1 #764ba2);
                border-radius: 12px;
                margin: 3px;
            }
        """)

        header_layout = QVBoxLayout(header_frame)
        header_layout.setContentsMargins(10, 5, 10, 5)  # ‡∏•‡∏î margin
        title_label = QLabel("üì¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: white;
                background: transparent;
                padding: 5px;
                line-height: 1.2;
            }
        """)
        header_layout.addWidget(title_label)
        main_layout.addWidget(header_frame)
        
        # Content Layout
        content_layout = QHBoxLayout()
        content_layout.setSpacing(20)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ - Camera Section (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î)
        left_frame = QFrame()
        left_frame.setStyleSheet("""
            QFrame {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
        """)
        left_layout = QVBoxLayout(left_frame)
        left_layout.setSpacing(15)
        left_layout.setContentsMargins(20, 20, 20, 20)
        
        # Camera Title
        camera_title = QLabel("üìπ ‡∏†‡∏≤‡∏û‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ (‡∏™‡∏î)")
        camera_title.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: 600;
                color: #ffffff;
                padding: 10px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 8px;
            }
        """)
        camera_title.setAlignment(Qt.AlignCenter)
        left_layout.addWidget(camera_title)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö camera ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
        camera_container = QWidget()
        camera_container_layout = QHBoxLayout(camera_container)
        camera_container_layout.setContentsMargins(0, 0, 0, 0)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacer ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        camera_container_layout.addStretch()
        
        # ‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å)
        self.camera_label = QLabel("üì∑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á...")
        self.camera_label.setFixedSize(720, 480)  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏à‡∏≤‡∏Å 580x360 ‡πÄ‡∏õ‡πá‡∏ô 720x480
        self.camera_label.setStyleSheet("""
            QLabel {
                border: 3px solid #4CAF50;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, 
                    stop:0 #2c3e50, stop:1 #34495e);
                border-radius: 12px;
                font-size: 16px;
                color: #ecf0f1;
                font-weight: 500;
                padding: 20px;
            }
        """)
        self.camera_label.setAlignment(Qt.AlignCenter)
        self.camera_label.setScaledContents(True)  # ‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Å‡∏£‡∏≠‡∏ö
        camera_container_layout.addWidget(self.camera_label)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacer ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
        camera_container_layout.addStretch()
        
        left_layout.addWidget(camera_container)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° MQTT Broker IP Section
        mqtt_section = QFrame()
        mqtt_section.setStyleSheet("""
            QFrame {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 10px;
                border: 1px solid rgba(255, 255, 255, 0.15);
                margin: 5px 0px;
            }
        """)
        mqtt_layout = QVBoxLayout(mqtt_section)
        mqtt_layout.setContentsMargins(15, 10, 15, 10)
        mqtt_layout.setSpacing(8)

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ MQTT
        mqtt_title = QLabel("üåê IP ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå MQTT")
        mqtt_title.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: 600;
                color: #ffffff;
                padding: 5px;
            }
        """)
        mqtt_title.setAlignment(Qt.AlignCenter)
        mqtt_layout.addWidget(mqtt_title)

        # ‡πÅ‡∏™‡∏î‡∏á IP Address ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° Refresh ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        ip_control_layout = QHBoxLayout()
        ip_control_layout.setSpacing(10)

        # ‡πÅ‡∏™‡∏î‡∏á IP Address
        self.mqtt_ip_label = QLabel("Loading IP...")
        self.mqtt_ip_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                font-weight: 500;
                color: #00ff88;
                padding: 8px;
                background: rgba(0, 0, 0, 0.3);
                border-radius: 6px;
                border: 1px solid #00ff88;
                font-family: 'Consolas', 'Monaco', monospace;
                min-width: 150px;
            }
        """)
        self.mqtt_ip_label.setAlignment(Qt.AlignCenter)
        ip_control_layout.addWidget(self.mqtt_ip_label)

        # ‡∏õ‡∏∏‡πà‡∏° Refresh IP
        self.refresh_ip_button = QPushButton("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä IP")
        self.refresh_ip_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #2196F3, stop:1 #1976D2);
                color: white;
                border: none;
                padding: 8px 15px;
                font-size: 11px;
                font-weight: 600;
                border-radius: 6px;
                min-width: 80px;
                max-width: 100px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #42A5F5, stop:1 #2196F3);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #1565C0, stop:1 #0D47A1);
            }
        """)
        self.refresh_ip_button.clicked.connect(self.run_ipv4_script)
        ip_control_layout.addWidget(self.refresh_ip_button)

        mqtt_layout.addLayout(ip_control_layout)
        left_layout.addWidget(mqtt_section)
        
        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
        button_layout.addStretch()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.start_button = ModernButton("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", "success")
        self.start_button.clicked.connect(self.start_program)
        button_layout.addWidget(self.start_button)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.stop_button = ModernButton("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö", "danger")
        self.stop_button.clicked.connect(self.stop_program)
        button_layout.addWidget(self.stop_button)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
        button_layout.addStretch()
        
        left_layout.addLayout(button_layout)
        content_layout.addWidget(left_frame)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤ - Information Panel
        right_frame = QFrame()
        right_frame.setFixedWidth(350)
        right_frame.setStyleSheet("""
            QFrame {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
        """)
        right_layout = QVBoxLayout(right_frame)
        right_layout.setSpacing(15)
        right_layout.setContentsMargins(20, 20, 20, 20)
        
        # ‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Log
        log_title = QLabel("üìù ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
        log_title.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: 600;
                color: #ffffff;
                padding: 5px;
            }
        """)
        right_layout.addWidget(log_title)
        
        self.text_display = QTextEdit()
        self.text_display.setFixedHeight(380)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
        self.text_display.setStyleSheet("""
            QTextEdit {
                background: rgba(0, 0, 0, 0.3);
                border: 2px solid #4CAF50;
                border-radius: 10px;
                padding: 15px;
                font-size: 11px;
                font-family: 'Consolas', 'Monaco', monospace;
                color: #00ff00;
                line-height: 1.2;
            }
            QScrollBar:vertical {
                background: rgba(255, 255, 255, 0.1);
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #4CAF50;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #66BB6A;
            }
        """)
        self.text_display.setPlaceholderText("üìÑ Waiting for log data from txt_file/log.txt...")
        right_layout.addWidget(self.text_display)
        
        # Database Manager Section
        self.phpmyadmin_button = ModernButton("üóÑÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "warning")
        self.phpmyadmin_button.clicked.connect(lambda: self.open_url("http://localhost/webV5"))
        right_layout.addWidget(self.phpmyadmin_button)
        
        # Student attendance statistics Section  
        self.youtube_button = ModernButton("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "warning")
        self.youtube_button.clicked.connect(lambda: self.open_url("http://localhost/webV5/statistics.php"))
        right_layout.addWidget(self.youtube_button)
        
        # Setting Camera Section
        self.camera_setting_button = QPushButton("üì∑  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
        self.camera_setting_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #6C63FF, stop:1 #5A52FF);
                color: white;
                border: none;
                padding: 10px 15px;
                font-size: 12px;
                font-weight: 600;
                border-radius: 6px;
                min-width: 280px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #7C73FF, stop:1 #6C63FF);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #4A42FF, stop:1 #3A32FF);
            }
        """)
        self.camera_setting_button.clicked.connect(self.run_camera_setting)
        right_layout.addWidget(self.camera_setting_button)
        
        # Delay Servo Section
        delay_servo_section = QFrame()
        delay_servo_section.setStyleSheet("""
            QFrame {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 10px;
                border: 1px solid rgba(255, 255, 255, 0.15);
                margin: 5px 0px;
            }
        """)
        delay_servo_layout = QVBoxLayout(delay_servo_section)
        delay_servo_layout.setContentsMargins(15, 10, 15, 10)
        delay_servo_layout.setSpacing(8)

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ delay_servo
        delay_servo_title = QLabel("‚è±Ô∏è ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡∏Å‡∏±‡πâ‡∏ô")
        delay_servo_title.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: 600;
                color: #ffffff;
                padding: 5px;
            }
        """)
        delay_servo_title.setAlignment(Qt.AlignCenter)
        delay_servo_layout.addWidget(delay_servo_title)

        # Input ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° Save ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        delay_control_layout = QHBoxLayout()
        delay_control_layout.setSpacing(10)

        # Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö delay_servo
        from PyQt5.QtWidgets import QLineEdit
        self.delay_servo_input = QLineEdit()
        self.delay_servo_input.setPlaceholderText("5")
        self.delay_servo_input.setStyleSheet("""
            QLineEdit {
                font-size: 12px;
                font-weight: 500;
                color: #ffffff;
                padding: 8px;
                background: rgba(0, 0, 0, 0.3);
                border-radius: 6px;
                border: 1px solid #00ff88;
                font-family: 'Consolas', 'Monaco', monospace;
                min-width: 60px;
                max-width: 80px;
            }
            QLineEdit:focus {
                border: 2px solid #00ff88;
            }
        """)
        delay_control_layout.addWidget(self.delay_servo_input)

        # Label "Second"
        second_label = QLabel("‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        second_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                font-weight: 500;
                color: #ffffff;
                padding: 5px;
            }
        """)
        delay_control_layout.addWidget(second_label)

        # ‡∏õ‡∏∏‡πà‡∏° Save
        self.save_delay_button = QPushButton("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        self.save_delay_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #4CAF50, stop:1 #45a049);
                color: white;
                border: none;
                padding: 8px 15px;
                font-size: 11px;
                font-weight: 600;
                border-radius: 6px;
                min-width: 60px;
                max-width: 80px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #5CBF60, stop:1 #4CAF50);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #3d8b40, stop:1 #2e7d32);
            }
        """)
        self.save_delay_button.clicked.connect(self.save_delay_servo)
        delay_control_layout.addWidget(self.save_delay_button)

        delay_servo_layout.addLayout(delay_control_layout)
        right_layout.addWidget(delay_servo_section)
        
        # Status Indicator
        self.status_label = QLabel("‚ö° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                font-weight: 600;
                color: #4CAF50;
                padding: 8px;
                background: rgba(76, 175, 80, 0.2);
                border-radius: 6px;
                border: 1px solid #4CAF50;
            }
        """)
        self.status_label.setAlignment(Qt.AlignCenter)
        right_layout.addWidget(self.status_label)
        
        content_layout.addWidget(right_frame)
        main_layout.addLayout(content_layout)
        
        central_widget.setLayout(main_layout)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
        self.video_thread.start()

        # Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .txt
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_text_display)
        self.timer.timeout.connect(self.update_mqtt_ip_display)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó MQTT IP
        self.timer.timeout.connect(self.load_delay_servo_value)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ delay_servo
        self.timer.start(1000)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó MQTT IP ‡πÅ‡∏•‡∏∞ delay_servo ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.update_mqtt_ip_display()
        self.load_delay_servo_value()

    def run_camera_setting(self):
        """‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå camera.py ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        try:
            if os.path.exists('GUI_line_detected_plate.py'):
                # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö non-blocking
                process = subprocess.Popen(['python', 'GUI_line_detected_plate.py'])
                print(f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô GUI_line_detected_plate.py - PID: {process.pid}")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå GUI_line_detected_plate.py")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô camera.py: {e}")

    def save_delay_servo(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ delay_servo ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå delay_servo.txt"""
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input field
            delay_value = self.delay_servo_input.text().strip()
            
            if not delay_value:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ delay_servo")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            try:
                delay_seconds = float(delay_value)
                delay_milliseconds = int(delay_seconds * 1000)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô milliseconds
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                from PyQt5.QtWidgets import QMessageBox
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Invalid Input")
                msg.setText("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                msg.exec_()
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå txt_file ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if not os.path.exists('txt_file'):
                os.makedirs('txt_file')
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            with open('txt_file/delay_servo.txt', 'w', encoding='utf-8') as f:
                f.write(str(delay_milliseconds))
            
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ delay_servo: {delay_seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({delay_milliseconds} milliseconds)")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            from PyQt5.QtWidgets import QMessageBox
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Save Successful")
            msg.setText(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
            msg.exec_()
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å delay_servo: {e}")

    def load_delay_servo_value(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ delay_servo ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô input field"""
        try:
            if os.path.exists('txt_file/delay_servo.txt'):
                with open('txt_file/delay_servo.txt', 'r', encoding='utf-8') as f:
                    delay_ms = f.read().strip()
                    if delay_ms:
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å milliseconds ‡πÄ‡∏õ‡πá‡∏ô seconds
                        delay_seconds = int(delay_ms) / 1000
                        # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô input field (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏¢‡∏π‡πà)
                        if not self.delay_servo_input.hasFocus():
                            self.delay_servo_input.setText(str(delay_seconds))
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î delay_servo: {e}")
        
    def update_image(self, cv_img):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ï‡πá‡∏°‡∏Å‡∏£‡∏≠‡∏ö"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QPixmap ‡∏à‡∏≤‡∏Å QImage
        pixmap = QPixmap.fromImage(cv_img)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏Ñ‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô
        scaled_pixmap = pixmap.scaled(
            self.camera_label.size(), 
            Qt.KeepAspectRatio, 
            Qt.SmoothTransformation
        )
  
        self.camera_label.setPixmap(scaled_pixmap)
        
    def run_ipv4_script(self):
        """‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå IPv4_Address.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó IP Address"""
        try:
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            self.refresh_ip_button.setText("‚è≥ Getting IP...")
            self.refresh_ip_button.setEnabled(False)
            
            # ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå IPv4_Address.py
            if os.path.exists('IPv4_Address.py'):
                process = subprocess.Popen(['python', 'IPv4_Address.py'])
                process.wait()  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                self.update_mqtt_ip_display()
                
                print("‚úÖ IPv4_Address.py executed successfully")
            else:
                print("‚ùå IPv4_Address.py not found")
                self.mqtt_ip_label.setText("‚ùå IPv4_Address.py not found")
                self.mqtt_ip_label.setStyleSheet("""
                    QLabel {
                        font-size: 12px;
                        font-weight: 500;
                        color: #ff4444;
                        padding: 8px;
                        background: rgba(0, 0, 0, 0.3);
                        border-radius: 6px;
                        border: 1px solid #ff4444;
                        font-family: 'Consolas', 'Monaco', monospace;
                    }
                """)
            
        except Exception as e:
            print(f"‚ùå Error running IPv4_Address.py: {e}")
            self.mqtt_ip_label.setText(f"‚ùå Error: {str(e)}")
            self.mqtt_ip_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: 500;
                    color: #ff4444;
                    padding: 8px;
                    background: rgba(0, 0, 0, 0.3);
                    border-radius: 6px;
                    border: 1px solid #ff4444;
                    font-family: 'Consolas', 'Monaco', monospace;
                }
            """)
        finally:
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
            self.refresh_ip_button.setText("üîÑ Get IPv4")
            self.refresh_ip_button.setEnabled(True)
    
    def update_mqtt_ip_display(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• MQTT Broker IP ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if os.path.exists('txt_file/mqtt_broker_ip.txt'):
                with open('txt_file/mqtt_broker_ip.txt', 'r', encoding='utf-8') as file:
                    ip_content = file.read().strip()
                    if ip_content:
                        self.mqtt_ip_label.setText(f"üì° {ip_content}")
                        self.mqtt_ip_label.setStyleSheet("""
                            QLabel {
                                font-size: 12px;
                                font-weight: 500;
                                color: #00ff88;
                                padding: 8px;
                                background: rgba(0, 0, 0, 0.3);
                                border-radius: 6px;
                                border: 1px solid #00ff88;
                                font-family: 'Consolas', 'Monaco', monospace;
                            }
                        """)
                    else:
                        self.mqtt_ip_label.setText("üì° No IP found")
                        self.mqtt_ip_label.setStyleSheet("""
                            QLabel {
                                font-size: 12px;
                                font-weight: 500;
                                color: #ffaa00;
                                padding: 8px;
                                background: rgba(0, 0, 0, 0.3);
                                border-radius: 6px;
                                border: 1px solid #ffaa00;
                                font-family: 'Consolas', 'Monaco', monospace;
                            }
                        """)
            else:
                self.mqtt_ip_label.setText("üì° mqtt_broker_ip.txt not found")
                self.mqtt_ip_label.setStyleSheet("""
                    QLabel {
                        font-size: 12px;
                        font-weight: 500;
                        color: #ffaa00;
                        padding: 8px;
                        background: rgba(0, 0, 0, 0.3);
                        border-radius: 6px;
                        border: 1px solid #ffaa00;
                        font-family: 'Consolas', 'Monaco', monospace;
                    }
                """)
        except Exception as e:
            self.mqtt_ip_label.setText(f"‚ùå Error reading IP: {str(e)[:20]}...")
            self.mqtt_ip_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: 500;
                    color: #ff4444;
                    padding: 8px;
                    background: rgba(0, 0, 0, 0.3);
                    border-radius: 6px;
                    border: 1px solid #ff4444;
                    font-family: 'Consolas', 'Monaco', monospace;
                }
            """)
    def start_program(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° - ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            # ‡∏õ‡∏¥‡∏î process ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            self.stop_program()
            with open('txt_file/car_plate.txt', 'w') as f:
                f.truncate(0)
            with open('txt_file/names.txt', 'w') as f:
                f.truncate(0)
            for filename in os.listdir('result_plate'):
                file_path = os.path.join('result_plate', filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
            # ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå python ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
            files_to_run = ['arduino_connect.py', 'line_detected_plate.py', 'detected_caracter.py', 'compare_data.py', 'text_to_speak.py']
            
            for file_name in files_to_run:
                if os.path.exists(file_name):
                    process = subprocess.Popen(['python', file_name])
                    self.running_processes.append(process)
                    
                    print(f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô {file_name} - PID: {process.pid}")
                else:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_name}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if self.running_processes:
                self.start_button.setText("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
                self.start_button.setEnabled(False)
                self.stop_button.setEnabled(True)
                self.status_label.setText("üü¢  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
                self.status_label.setStyleSheet("""
                    QLabel {
                        font-size: 12px;
                        font-weight: 600;
                        color: #4CAF50;
                        padding: 8px;
                        background: rgba(76, 175, 80, 0.3);
                        border-radius: 6px;
                        border: 1px solid #4CAF50;
                    }
                """)
            else:
                self.status_label.setText("üî¥  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                self.status_label.setStyleSheet("""
                    QLabel {
                        font-size: 12px;
                        font-weight: 600;
                        color: #f44336;
                        padding: 8px;
                        background: rgba(244, 67, 54, 0.2);
                        border-radius: 6px;
                        border: 1px solid #f44336;
                    }
                """)
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: {e}")
            self.status_label.setText("üî¥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
            self.status_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: 600;
                    color: #f44336;
                    padding: 8px;
                    background: rgba(244, 67, 54, 0.2);
                    border-radius: 6px;
                    border: 1px solid #f44336;
                }
            """)
    
    def stop_program(self):
        """‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
       
        try:
            # ‡∏õ‡∏¥‡∏î process ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for process in self.running_processes:
                if process.poll() is None:  # ‡∏ñ‡πâ‡∏≤ process ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
                    process.terminate()
                    process.wait()  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ process ‡∏õ‡∏¥‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
                    print(f"üõë ‡∏õ‡∏¥‡∏î process PID: {process.pid}")
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ process
            self.running_processes.clear()
            
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
            self.start_button.setText("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            self.start_button.setEnabled(True)
            self.stop_button.setEnabled(True)
            self.status_label.setText("‚ö° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            self.status_label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: 600;
                    color: #ff9800;
                    padding: 8px;
                    background: rgba(255, 152, 0, 0.2);
                    border-radius: 6px;
                    border: 1px solid #ff9800;
                }
            """)
            
            print("‚úÖ ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: {e}")
    
    def open_url(self, url):
        """‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡πÄ‡∏ã‡∏≠‡∏£‡πå"""
        try:
            webbrowser.open(url)
            print(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î URL: {url}")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î URL: {e}")
    
    def update_text_display(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå log.txt"""
        try:
            if os.path.exists('txt_file/log.txt'):
                with open('txt_file/log.txt', 'r', encoding='utf-8') as file:
                    content = file.read()
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÅ‡∏•‡∏∞ formatting
                    from datetime import datetime
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    formatted_content = f"[{timestamp}] üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n" + "="*40 + "\n" + content
                    self.text_display.setPlainText(formatted_content)
                    # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    cursor = self.text_display.textCursor()
                    cursor.movePosition(cursor.End)
                    self.text_display.setTextCursor(cursor)
            else:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå
                self.text_display.setPlainText("üìÅ Log file not found: txt_file/log.txt\nüìù Waiting for system to create log file...")
        except Exception as e:
            error_msg = f"‚ùå Error reading log file: {str(e)}\nüìÅ Expected location: txt_file/log.txt"
            self.text_display.setPlainText(error_msg)
    
    def closeEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á"""
        # ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.stop_program()
        
        event.accept()

def main():
    app = QApplication(sys.argv)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    app.setApplicationName("Student Name Announcement System Based on Parent License Plates")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    font = QFont("Segoe UI", 10)
    app.setFont(font)
    
    window = SystemGUI()
    window.show()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()